{
  "flashcardSets": [
    {
      "id": "3",
      "name": "History Facts",
      "description": "A collection of flashcards about important historical events.",
      "userId": "5",
      "flashcards": [
        {
          "id": "1",
          "question": "Who was the first President of the United States?",
          "answer": "George Washington",
          "image": {
            "id": "UczwJ",
            "url": "https://images.unsplash.com/photo-1612287230202-1ff1d85d1bdf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3NjI5NDh8MHwxfHNlYXJjaHw4fHxnYW1lfGVufDB8fHx8MTc0OTcxMTYxOXww&ixlib=rb-4.1.0&q=80&w=400",
            "alt": "red xbox one game controller"
          }
        },
        {
          "id": "2",
          "question": "What year did World War II end?",
          "answer": "1945",
          "image": null
        },
        {
          "id": "3",
          "question": "Who discovered America in 1492?",
          "answer": "Christopher Columbus",
          "image": {
            "id": "adsf",
            "url": "https://images.unsplash.com/photo-1612287230202-1ff1d85d1bdf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3NjI5NDh8MHwxfHNlYXJjaHw4fHxnYW1lfGVufDB8fHx8MTc0OTcxMTYxOXww&ixlib=rb-4.1.0&q=80&w=400",
            "alt": "red xbox one game controller"
          }
        },
        {
          "id": "4",
          "question": "What was the name of the ship that sank in 1912?",
          "answer": "Titanic",
          "image": null
        }
      ],
      "status": true
    },
    {
      "id": "d3d",
      "name": "new Set",
      "description": "setNew",
      "userId": "5",
      "flashcards": [
        {
          "id": "b22beb81-8a72-4318-b735-841417182342",
          "question": "1",
          "answer": "ansưẻ2",
          "image": null
        },
        {
          "id": "e8825ef2-d576-412e-96d9-f3141dfdf0b2",
          "question": "2",
          "answer": "444",
          "image": {
            "id": "122872",
            "url": "https://images.unsplash.com/photo-1612287230202-1ff1d85d1bdf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3NjI5NDh8MHwxfHNlYXJjaHw4fHxnYW1lfGVufDB8fHx8MTc0OTcxMTYxOXww&ixlib=rb-4.1.0&q=80&w=400",
            "alt": "red xbox one game controller"
          }
        },
        {
          "id": "630bf680-796e-4d07-85fe-098a1883f241",
          "question": "3",
          "answer": "4444",
          "image": null
        }
      ],
      "status": true
    },
    {
      "name": "OnlyCat",
      "description": "cat cat cat",
      "flashcards": [
        {
          "id": "77c1cae2-fea2-4cea-8df9-a3d55e8f1df9",
          "question": "cat 1",
          "answer": "orange",
          "image": null
        },
        {
          "id": "3fabe72d-5c26-4483-9890-368e25e75910",
          "question": "cat 2",
          "answer": "huhuhu",
          "image": null
        },
        {
          "id": "6dd9237c-25b2-4c46-9938-599d8c6f9edd",
          "question": "meo3",
          "answer": "tao moi",
          "image": null
        }
      ],
      "userId": "5",
      "id": "0554",
      "status": true
    },
    {
      "id": "c2e3",
      "name": "lam on lam phuoc",
      "description": "",
      "flashcards": [
        {
          "id": "8fd0fcae-41ba-4299-8e88-8b1878b5b11d",
          "question": "aaaaa",
          "answer": "aaaa",
          "image": null
        },
        {
          "id": "817465df-4aaa-44a3-ade6-48d801ce071f",
          "question": "bbb",
          "answer": "b123",
          "image": null
        }
      ],
      "userId": "5",
      "status": false
    },
    {
      "id": "9a0d",
      "name": "Toi kho qua",
      "description": "met moi",
      "flashcards": [
        {
          "id": "0a5dec81-51c7-4118-b88c-171e10444294",
          "question": "new term",
          "answer": "new def",
          "image": {
            "id": "RmoWqDCqN2E",
            "url": "https://images.unsplash.com/photo-1537420327992-d6e192287183?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3NjI5NDh8MHwxfHNlYXJjaHwxfHxzcGFjZXxlbnwwfHx8fDE3NDk3MTY0NjF8MA&ixlib=rb-4.1.0&q=80&w=400",
            "alt": "timelapse photography of warped lines"
          }
        },
        {
          "id": "ac9e1340-f1fd-499f-a59e-978a594c0192",
          "question": "space 2",
          "answer": "alanawalker",
          "image": {
            "id": "WPapb9IqRKw",
            "url": "https://images.unsplash.com/photo-1591389703635-e15a07b842d7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3NjI5NDh8MHwxfHNlYXJjaHw1fHxsYW5kfGVufDB8fHx8MTc0OTcxNjQ4M3ww&ixlib=rb-4.1.0&q=80&w=400",
            "alt": "aerial view of green grass field"
          }
        }
      ],
      "userId": "5",
      "status": false
    },
    {
      "name": "new set public toi da sua cai nay",
      "description": "description",
      "flashcards": [
        {
          "id": "83b85b15-5cae-4495-87eb-a0b3b86f210e",
          "question": "who is most famous 2",
          "answer": "so 2",
          "image": {
            "id": "rPOmLGwai2w",
            "url": "https://images.unsplash.com/photo-1507838153414-b4b713384a76?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3NjI5NDh8MHwxfHNlYXJjaHwyfHxtdXNpY3xlbnwwfHx8fDE3NDk3MTgyMDB8MA&ixlib=rb-4.1.0&q=80&w=400",
            "alt": "tilt selective photograph of music notes"
          }
        },
        {
          "id": "0a4a86ee-daf5-405d-81f9-9437e9982600",
          "question": "which anime",
          "answer": "dan da dan",
          "image": {
            "id": "nKO_1QyFh9o",
            "url": "https://images.unsplash.com/photo-1571757767119-68b8dbed8c97?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3NjI5NDh8MHwxfHNlYXJjaHw1fHxhbmltZXxlbnwwfHx8fDE3NDk3MTgyMTl8MA&ixlib=rb-4.1.0&q=80&w=400",
            "alt": "white and gray robot during daytime"
          }
        }
      ],
      "userId": "5",
      "id": "3653",
      "status": false
    },
    {
      "id": "e270",
      "name": "dasd",
      "description": "add",
      "flashcards": [
        {
          "id": "96af00ec-1bfa-4e0f-875d-fd864d44a145",
          "question": "das",
          "answer": "dad",
          "image": null
        },
        {
          "id": "33180682-0eb9-4712-832d-26275d8e4ab6",
          "question": "dasd",
          "answer": "dsad",
          "image": null
        }
      ],
      "userId": "2",
      "status": false
    },
    {
      "id": "db3e",
      "name": "JAVA",
      "description": "Fe",
      "flashcards": [
        {
          "id": "97edbad3-6370-423d-b535-6602d4aa3d55",
          "question": "a",
          "answer": "a",
          "image": null
        },
        {
          "id": "d9848d0d-795b-4f74-8a15-bc933758256d",
          "question": "b",
          "answer": "b",
          "image": null
        }
      ],
      "userId": "1",
      "status": true
    },
    {
      "id": "a1cc",
      "name": "C#",
      "description": "fe",
      "flashcards": [
        {
          "id": "094b2476-f2a7-4ea0-8e2e-42976dba39f4",
          "question": "a",
          "answer": "a",
          "image": null
        },
        {
          "id": "36439713-ce3c-4f47-8d1f-17e5dba3c9d7",
          "question": "b",
          "answer": "b",
          "image": null
        }
      ],
      "userId": "1",
      "status": true
    },
    {
      "id": "671f",
      "name": "Node",
      "description": "FE",
      "flashcards": [
        {
          "id": "5bf45f98-edf4-42c2-8793-6c79f3b802e6",
          "question": "a",
          "answer": "a",
          "image": null
        },
        {
          "id": "9b84d1cb-ecdf-46fa-940b-df85a4bc2bf6",
          "question": "b",
          "answer": "b",
          "image": null
        }
      ],
      "userId": "1",
      "status": true
    },
    {
      "id": "72b8",
      "name": "New game",
      "description": "A collection of flashcards about important historical events.A collection of flashcards about important historical events.A collection of flashcards about important historical events.A collection of flashcards about important historical events.",
      "userId": "1",
      "flashcards": [
        {
          "id": "44dbd4bb-e4e4-4a8a-8609-414bc7c076f0",
          "question": "a",
          "answer": "a",
          "image": null
        },
        {
          "id": "bd6a831a-6d41-4f83-aaa8-5827406209d7",
          "question": "b",
          "answer": "b",
          "image": null
        }
      ],
      "status": true
    }
  ],
  "account": [
    {
      "id": "1",
      "username": "admin",
      "password": "123456",
      "role": "0",
      "status": true,
      "lastTokenIat": 1755053579,
      "bio": "This is a test bio to verify the theme adaptation works correctly.",
      "email": "admin@example.com",
      "socialLinks": {
        "website": "https://example.com",
        "linkedin": "",
        "github": "",
        "twitter": ""
      }
    },
    {
      "id": "2",
      "username": "truong",
      "password": "123456",
      "role": "1",
      "status": true,
      "lastTokenIat": 1755071123
    },
    {
      "id": "4",
      "username": "pctra266",
      "password": "pctra266",
      "role": "2",
      "status": true,
      "lastTokenIat": 1755053609,
      "bio": "I'm a passionate learner who loves technology, programming, and sharing knowledge with others. Always excited to explore new ideas and connect with fellow learners!",
      "email": "pctra266@example.com",
      "socialLinks": {
        "website": "https://pctra266.dev",
        "linkedin": "",
        "github": "https://github.com/pctra266",
        "twitter": ""
      }
    },
    {
      "id": "5",
      "username": "trapham266",
      "password": "trapham266",
      "role": "2",
      "status": true,
      "lastTokenIat": 1755053982
    },
    {
      "id": "6",
      "username": "bill",
      "password": "123456",
      "role": "2",
      "status": false,
      "lastTokenIat": 0
    },
    {
      "id": "7",
      "username": "bill123",
      "password": "888888",
      "role": "2",
      "status": true,
      "lastTokenIat": 0
    },
    {
      "id": "8",
      "username": "hieu12",
      "password": "2@Stunning",
      "role": "2",
      "status": true,
      "lastTokenIat": 0
    },
    {
      "id": "9",
      "username": "hieuqw123",
      "password": "123456789Hh@",
      "role": "2",
      "status": true,
      "lastTokenIat": 0
    },
    {
      "id": "10",
      "username": "bill9999",
      "password": "123456",
      "role": "2",
      "status": true,
      "lastTokenIat": 0
    },
    {
      "id": "11",
      "username": "bill1010",
      "role": "2",
      "status": true,
      "password": "123456"
    },
    {
      "id": "12",
      "username": "billq1331",
      "password": "123456",
      "role": "1",
      "status": true,
      "lastTokenIat": 0
    },
    {
      "id": "13",
      "username": "bill1232131",
      "password": "123456",
      "role": "2",
      "status": true,
      "lastTokenIat": 0
    },
    {
      "id": "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
      "username": "Trương Quốc Trường",
      "email": "tqtolympia@gmail.com",
      "role": "2",
      "status": true,
      "lastTokenIat": 1755056023,
      "password": "123456"
    },
    {
      "id": "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
      "username": "Trà Phạm",
      "email": "phamtra001@gmail.com",
      "role": "2",
      "status": true,
      "lastTokenIat": 1754630369
    },
    {
      "id": "14",
      "username": "hieu1234",
      "password": "2@Stunning",
      "role": "2",
      "status": true,
      "lastTokenIat": 1754905042
    },
    {
      "id": "MA9zIKD7eDdVTJqGLIfN7PThajx1",
      "username": "Phong Nguyễn",
      "role": "1",
      "status": true,
      "email": "phongvg04@gmail.com",
      "lastTokenIat": 1754880384
    }
  ],
  "role": [
    {
      "id": "0",
      "role": "superadmin"
    },
    {
      "id": "1",
      "role": "admin"
    },
    {
      "id": "2",
      "role": "user"
    }
  ],
  "books": [
    {
      "id": "1795",
      "isbn": "978-3-16-148410-9",
      "title": "Clean Codeee",
      "author": "Robert C. Martin",
      "copies": 7,
      "chapters": [
        {
          "name": "Introduction"
        },
        {
          "name": "Meaningful Names"
        },
        {
          "name": "Functions"
        },
        {
          "name": "ferfr"
        },
        {
          "name": "rr"
        }
      ],
      "content": {
        "Introduction": "Clean Code introduces the principles, patterns, and best practices for writing clean, readable, and maintainable code.",
        "Meaningful Names": "This chapter explains how to choose descriptive and unambiguous names for variables, functions, and classes.",
        "Functions": "Guidelines for writing small, well-structured, and reusable functions are provided here.",
        "ferfr": "rffr",
        "rr": "rgrg"
      },
      "userId": "14"
    }
  ],
  "discussions": [
    {
      "id": "1",
      "title": "How to integrate Material-UI with React TypeScript in Bright Town Study?",
      "content": "I'm working on improving the UI components for our learning platform. Has anyone successfully implemented Material-UI with TypeScript? I'm particularly interested in how to properly type the theme and custom components like our NavBar.",
      "authorId": "4",
      "authorName": "pctra266",
      "tags": [
        "material-ui",
        "typescript",
        "react",
        "ui-design",
        "component-architecture"
      ],
      "createdAt": "2025-08-10T09:15:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 8,
      "downvotes": 1,
      "score": 7,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "5": "upvote",
        "14": "downvote",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
      },
      "views": 15,
      "viewedBy": [
        "1",
        "2",
        "5",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
        "14",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1"
      ],
      "answers": [
        {
          "id": "1",
          "content": "I've been working on this exact issue! For TypeScript integration with MUI, make sure to extend the Theme interface and create custom styled components. Here's what worked for me:\n\n```typescript\ndeclare module '@mui/material/styles' {\n  interface Theme {\n    customPalette: {\n      brightTown: string;\n    };\n  }\n}\n```\n\nAlso, the way you're handling the LinkTab component in NavBar.tsx looks solid!",
          "authorId": "2",
          "authorName": "truong",
          "createdAt": "2025-08-10T14:30:00Z",
          "updatedAt": "2025-08-11T08:45:00Z",
          "isEdited": true,
          "isAccepted": true,
          "upvotes": 12,
          "downvotes": 0,
          "score": 12,
          "userVotes": {
            "1": "upvote",
            "4": "upvote",
            "5": "upvote",
            "14": "upvote",
            "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote"
          },
          "comments": [
            {
              "id": "c1",
              "content": "This is exactly what I needed! The theme extension approach is perfect for our custom branding.",
              "authorId": "4",
              "authorName": "pctra266",
              "createdAt": "2025-08-10T15:00:00Z",
              "updatedAt": null,
              "isEdited": false,
              "upvotes": 3,
              "downvotes": 0,
              "score": 3,
              "userVotes": {
                "1": "upvote",
                "2": "upvote",
                "5": "upvote"
              }
            },
            {
              "id": "c2",
              "content": "Should we also consider using emotion for styled components or stick with MUI's sx prop?",
              "authorId": "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
              "authorName": "Trà Phạm",
              "createdAt": "2025-08-10T16:20:00Z",
              "updatedAt": null,
              "isEdited": false,
              "upvotes": 2,
              "downvotes": 0,
              "score": 2,
              "userVotes": {
                "1": "upvote",
                "2": "upvote"
              }
            }
          ]
        },
        {
          "id": "2",
          "content": "For the admin features, I recommend creating separate theme variants for different user roles. The current role-based navigation in NavBar is a good start, but we could enhance it with role-specific styling.",
          "authorId": "1",
          "authorName": "admin",
          "createdAt": "2025-08-10T18:45:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": false,
          "upvotes": 6,
          "downvotes": 0,
          "score": 6,
          "userVotes": {
            "2": "upvote",
            "4": "upvote",
            "5": "upvote",
            "14": "upvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
            "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
          },
          "comments": []
        }
      ],
      "hasAcceptedAnswer": true,
      "comments": [
        {
          "id": "1",
          "content": "Great discussion! This will really help improve our platform's UI consistency.",
          "authorId": "14",
          "authorName": "hieu1234",
          "createdAt": "2025-08-11T09:30:00Z",
          "updatedAt": null,
          "isEdited": false,
          "upvotes": 1,
          "downvotes": 0,
          "score": 1,
          "userVotes": {
            "1": "upvote"
          }
        }
      ]
    },
    {
      "id": "2",
      "title": "Flashcard System Architecture - Best Practices for React State Management",
      "content": "Our flashcard feature is growing complex with study sessions, progress tracking, and spaced repetition. What's the best way to manage state for flashcard sets and user progress? Should we use Context API, Redux, or Zustand?",
      "authorId": "2",
      "authorName": "truong",
      "tags": [
        "flashcards",
        "state-management",
        "react",
        "context-api",
        "performance-optimization"
      ],
      "createdAt": "2025-08-09T11:20:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 15,
      "downvotes": 2,
      "score": 13,
      "userVotes": {
        "1": "upvote",
        "4": "upvote",
        "5": "upvote",
        "14": "upvote",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1": "downvote"
      },
      "views": 23,
      "viewedBy": [
        "1",
        "4",
        "5",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
        "14",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1"
      ],
      "answers": [
        {
          "id": "3",
          "content": "For our use case, I'd recommend Zustand. It's lightweight and perfect for managing flashcard state. Here's a simple store structure:\n\n```typescript\ninterface FlashcardStore {\n  currentSet: FlashcardSet | null;\n  studyProgress: StudyProgress;\n  setCurrentSet: (set: FlashcardSet) => void;\n  updateProgress: (cardId: string, correct: boolean) => void;\n}\n```\n\nContext API might cause unnecessary re-renders with our complex flashcard data.",
          "authorId": "4",
          "authorName": "pctra266",
          "createdAt": "2025-08-09T13:45:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": false,
          "upvotes": 9,
          "downvotes": 1,
          "score": 8,
          "userVotes": {
            "1": "upvote",
            "2": "upvote",
            "5": "upvote",
            "14": "downvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
            "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
          },
          "comments": [
            {
              "id": "c3",
              "content": "Zustand is definitely more performant for our flashcard operations. Plus it's easier to debug than Context API.",
              "authorId": "1",
              "authorName": "admin",
              "createdAt": "2025-08-09T14:15:00Z",
              "updatedAt": null,
              "isEdited": false,
              "upvotes": 4,
              "downvotes": 0,
              "score": 4,
              "userVotes": {
                "2": "upvote",
                "4": "upvote",
                "5": "upvote",
                "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
              }
            }
          ]
        },
        {
          "id": "4",
          "content": "I've been using the current Context API approach and it works well for now. But as we add more features like collaborative study sessions and real-time progress sharing, we might need something more robust. Maybe we could start with optimizing our current AuthContext first?",
          "authorId": "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
          "authorName": "Trà Phạm",
          "createdAt": "2025-08-09T16:30:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": true,
          "upvotes": 7,
          "downvotes": 0,
          "score": 7,
          "userVotes": {
            "1": "upvote",
            "2": "upvote",
            "4": "upvote",
            "5": "upvote",
            "14": "upvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote"
          },
          "comments": []
        }
      ],
      "hasAcceptedAnswer": true
    },
    {
      "id": "3",
      "title": "Discussion Hub Real-time Features Implementation",
      "content": "I'm working on implementing real-time voting and comments for our Discussion Hub. Should we use Socket.io, Server-Sent Events, or WebSockets? The current voting system works well but lacks real-time updates.",
      "authorId": "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
      "authorName": "Trương Quốc Trường",
      "tags": [
        "real-time-features",
        "discussion-forum",
        "voting-system",
        "api-integration",
        "frontend"
      ],
      "createdAt": "2025-08-08T14:20:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 11,
      "downvotes": 0,
      "score": 11,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "4": "upvote",
        "5": "upvote",
        "14": "upvote",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1": "upvote"
      },
      "views": 18,
      "viewedBy": [
        "1",
        "2",
        "4",
        "5",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
        "14",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1"
      ],
      "answers": [
        {
          "id": "5",
          "content": "For real-time discussions, Socket.io would be perfect! It handles connection management, reconnection, and fallbacks automatically. We can create rooms for each discussion thread and emit events for votes, comments, and new answers.\n\nThe current DiscussionRealTime.tsx component is a good starting point - we just need to integrate the socket events.",
          "authorId": "MA9zIKD7eDdVTJqGLIfN7PThajx1",
          "authorName": "Phong Nguyễn",
          "createdAt": "2025-08-08T16:45:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": true,
          "upvotes": 8,
          "downvotes": 0,
          "score": 8,
          "userVotes": {
            "1": "upvote",
            "2": "upvote",
            "4": "upvote",
            "14": "upvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
            "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
          },
          "comments": [
            {
              "id": "c4",
              "content": "Socket.io is definitely the way to go. We should also consider implementing presence indicators to show who's currently viewing a discussion.",
              "authorId": "4",
              "authorName": "pctra266",
              "createdAt": "2025-08-08T17:15:00Z",
              "updatedAt": null,
              "isEdited": false,
              "upvotes": 3,
              "downvotes": 0,
              "score": 3,
              "userVotes": {
                "1": "upvote",
                "2": "upvote",
                "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote"
              }
            }
          ]
        }
      ],
      "hasAcceptedAnswer": true,
      "comments": []
    },
    {
      "id": "4",
      "title": "Book Library Management - File Storage and Content Delivery",
      "content": "Our library feature needs better file management for book chapters and content. Currently using JSON for content storage, but should we move to a proper file storage solution like AWS S3 or local file system?",
      "authorId": "14",
      "authorName": "hieu1234",
      "tags": [
        "library-management",
        "book-content",
        "database-design",
        "api-integration",
        "feature-request"
      ],
      "createdAt": "2025-08-07T10:30:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 6,
      "downvotes": 1,
      "score": 5,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "4": "upvote",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1": "downvote"
      },
      "views": 12,
      "viewedBy": [
        "1",
        "2",
        "4",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1"
      ],
      "answers": [
        {
          "id": "6",
          "content": "For development and testing, the current JSON approach in db.json works fine. But for production, we should definitely consider a hybrid approach:\n\n1. Metadata in database (title, author, chapters list)\n2. Content files stored separately (markdown/HTML files)\n3. Images and assets in CDN\n\nThis way we can support rich text, better search, and efficient loading.",
          "authorId": "1",
          "authorName": "admin",
          "createdAt": "2025-08-07T13:20:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": false,
          "upvotes": 4,
          "downvotes": 0,
          "score": 4,
          "userVotes": {
            "2": "upvote",
            "4": "upvote",
            "14": "upvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote"
          },
          "comments": []
        }
      ],
      "hasAcceptedAnswer": false
    },
    {
      "id": "5",
      "title": "JWT Session Management and Security Best Practices",
      "content": "Looking at our JWTSessionManager.ts, are we handling token refresh and security properly? Should we implement refresh tokens or is the current lastTokenIat approach sufficient for our learning platform?",
      "authorId": "5",
      "authorName": "trapham266",
      "tags": [
        "jwt-security",
        "authentication",
        "session-management",
        "best-practices",
        "security"
      ],
      "createdAt": "2025-08-06T09:15:00Z",
      "updatedAt": "2025-08-06T15:30:00Z",
      "isEdited": true,
      "upvotes": 9,
      "downvotes": 0,
      "score": 9,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "4": "upvote",
        "14": "upvote",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1": "upvote"
      },
      "views": 16,
      "viewedBy": [
        "1",
        "2",
        "4",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
        "14",
        "MA9zIKD7eDdVTJqGLIfN7PThajx1"
      ],
      "answers": [
        {
          "id": "7",
          "content": "For a learning platform, security is crucial especially with user progress data. I'd recommend implementing proper refresh tokens. The current lastTokenIat is a good start but we should add:\n\n1. Refresh token rotation\n2. Secure httpOnly cookies for sensitive tokens\n3. Rate limiting for auth endpoints\n4. Session cleanup for inactive users\n\nOur AuthContext.tsx already handles most auth state well.",
          "authorId": "1",
          "authorName": "admin",
          "createdAt": "2025-08-06T11:45:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": true,
          "upvotes": 7,
          "downvotes": 0,
          "score": 7,
          "userVotes": {
            "2": "upvote",
            "4": "upvote",
            "5": "upvote",
            "14": "upvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
            "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote",
            "MA9zIKD7eDdVTJqGLIfN7PThajx1": "upvote"
          },
          "comments": [
            {
              "id": "c5",
              "content": "Should we also consider implementing 2FA for admin accounts since we have role-based access?",
              "authorId": "4",
              "authorName": "pctra266",
              "createdAt": "2025-08-06T12:30:00Z",
              "updatedAt": null,
              "isEdited": false,
              "upvotes": 2,
              "downvotes": 0,
              "score": 2,
              "userVotes": {
                "1": "upvote",
                "5": "upvote"
              }
            }
          ]
        }
      ],
      "hasAcceptedAnswer": true
    },
    {
      "id": "6",
      "title": "Theme Toggle Implementation - Dark/Light Mode Best Practices",
      "content": "Our ThemeToggle component works great, but I'm wondering about persisting theme preference and system theme detection. Should we store the preference in localStorage or user profile?",
      "authorId": "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
      "authorName": "Trà Phạm",
      "tags": [
        "theme",
        "ui-design",
        "frontend",
        "best-practices",
        "user-experience"
      ],
      "createdAt": "2025-08-05T16:40:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 5,
      "downvotes": 0,
      "score": 5,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "4": "upvote",
        "5": "upvote",
        "14": "upvote"
      },
      "views": 8,
      "viewedBy": [
        "1",
        "2",
        "4",
        "5",
        "14"
      ],
      "answers": [
        {
          "id": "8",
          "content": "I'd suggest a hybrid approach:\n\n1. Use localStorage for quick access and offline persistence\n2. Sync with user profile for cross-device consistency\n3. Detect system preference on first visit\n4. The current ThemeContext.tsx structure supports this well\n\nWe could add a `prefers-color-scheme` media query listener to our theme context.",
          "authorId": "2",
          "authorName": "truong",
          "createdAt": "2025-08-05T18:15:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": false,
          "upvotes": 3,
          "downvotes": 0,
          "score": 3,
          "userVotes": {
            "1": "upvote",
            "4": "upvote",
            "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
          },
          "comments": []
        }
      ],
      "hasAcceptedAnswer": false,
      "comments": [
        {
          "id": "2",
          "content": "Great question! Theme persistence is important for user experience.",
          "authorId": "14",
          "authorName": "hieu1234",
          "createdAt": "2025-08-05T19:00:00Z",
          "updatedAt": null,
          "isEdited": false,
          "upvotes": 1,
          "downvotes": 0,
          "score": 1,
          "userVotes": {
            "1": "upvote"
          }
        }
      ]
    },
    {
      "id": "7",
      "title": "Admin Dashboard Performance Optimization",
      "content": "The admin dashboard with user management and flashcard management is getting slower with more data. Any suggestions for optimizing the ManagerUser.tsx and FlashcardList.tsx components? Should we implement virtualization or pagination?",
      "authorId": "MA9zIKD7eDdVTJqGLIfN7PThajx1",
      "authorName": "Phong Nguyễn",
      "tags": [
        "admin-dashboard",
        "performance-optimization",
        "pagination",
        "user-management",
        "react"
      ],
      "createdAt": "2025-08-04T12:30:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 7,
      "downvotes": 0,
      "score": 7,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "4": "upvote",
        "5": "upvote",
        "14": "upvote",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
      },
      "views": 11,
      "viewedBy": [
        "1",
        "2",
        "4",
        "5",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
        "14"
      ],
      "answers": [
        {
          "id": "9",
          "content": "I notice you already have Pagination.tsx component! That's a great start. For the admin dashboard, I'd recommend:\n\n1. Implementing pagination for both user and flashcard lists\n2. Adding search/filter functionality to reduce data load\n3. Using React.memo for list items to prevent unnecessary re-renders\n4. Consider react-window for very large lists\n\nThe current Pagination component should handle most use cases.",
          "authorId": "4",
          "authorName": "pctra266",
          "createdAt": "2025-08-04T14:20:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": true,
          "upvotes": 6,
          "downvotes": 0,
          "score": 6,
          "userVotes": {
            "1": "upvote",
            "2": "upvote",
            "5": "upvote",
            "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
            "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote",
            "MA9zIKD7eDdVTJqGLIfN7PThajx1": "upvote"
          },
          "comments": []
        }
      ],
      "hasAcceptedAnswer": true
    },
    {
      "id": "8",
      "title": "Vite Configuration and Build Optimization for Production",
      "content": "Our vite.config.ts seems basic. Should we add more optimization for production builds? Things like bundle splitting, compression, and asset optimization for our educational platform?",
      "authorId": "1",
      "authorName": "admin",
      "tags": [
        "vite",
        "build-optimization",
        "typescript",
        "performance-optimization",
        "deployment"
      ],
      "createdAt": "2025-08-03T11:45:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 4,
      "downvotes": 0,
      "score": 4,
      "userVotes": {
        "2": "upvote",
        "4": "upvote",
        "5": "upvote",
        "14": "upvote"
      },
      "views": 7,
      "viewedBy": [
        "2",
        "4",
        "5",
        "14"
      ],
      "answers": [
        {
          "id": "10",
          "content": "For a React TypeScript app like ours, I'd suggest these Vite optimizations:\n\n```typescript\nexport default defineConfig({\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          ui: ['@mui/material', '@mui/icons-material']\n        }\n      }\n    },\n    chunkSizeWarningLimit: 1000\n  },\n  plugins: [react(), ...(process.env.NODE_ENV === 'production' ? [compression()] : [])]\n})\n```\n\nThis will help with loading performance for our users studying flashcards.",
          "authorId": "2",
          "authorName": "truong",
          "createdAt": "2025-08-03T15:30:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": false,
          "upvotes": 3,
          "downvotes": 0,
          "score": 3,
          "userVotes": {
            "1": "upvote",
            "4": "upvote",
            "5": "upvote"
          },
          "comments": []
        }
      ],
      "hasAcceptedAnswer": false,
      "comments": []
    },
    {
      "id": "9",
      "title": "How to implement Socket.io for real-time notifications?",
      "content": "I want to add real-time notifications to our Bright Town Study platform. Users should be notified when someone votes on their discussions, replies to their comments, or when new flashcard sets are shared. What's the best approach using Socket.io with our React TypeScript setup?",
      "authorId": "5",
      "authorName": "trapham266",
      "tags": [
        "real-time-features",
        "api-integration",
        "typescript",
        "frontend",
        "notifications"
      ],
      "createdAt": "2025-08-02T14:45:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 6,
      "downvotes": 0,
      "score": 6,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "4": "upvote",
        "14": "upvote",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43": "upvote",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2": "upvote"
      },
      "views": 9,
      "viewedBy": [
        "1",
        "2",
        "4",
        "14",
        "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2"
      ],
      "answers": [
        {
          "id": "11",
          "content": "For real-time notifications, I'd suggest this architecture:\n\n1. Socket.io rooms for each user\n2. Emit events from server when data changes\n3. React context to manage notification state\n4. Material-UI Snackbar for displaying notifications\n\nYou'll need to integrate it with your existing AuthContext to join the right rooms when users log in.",
          "authorId": "XhMHLRSU9HVYU5wY4Sm5LrRYYj43",
          "authorName": "Trương Quốc Trường",
          "createdAt": "2025-08-02T16:20:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": true,
          "upvotes": 5,
          "downvotes": 0,
          "score": 5,
          "userVotes": {
            "1": "upvote",
            "2": "upvote",
            "4": "upvote",
            "5": "upvote",
            "14": "upvote"
          },
          "comments": []
        }
      ],
      "hasAcceptedAnswer": true
    },
    {
      "id": "10",
      "title": "Responsive Design Issues with Material-UI Components",
      "content": "Some of our Material-UI components don't look great on mobile devices, especially the flashcard study interface and discussion threads. The NavBar works well but other components need improvement. Any suggestions for responsive design patterns with MUI?",
      "authorId": "14",
      "authorName": "hieu1234",
      "tags": [
        "responsive-design",
        "material-ui",
        "ui-design",
        "mobile",
        "css"
      ],
      "createdAt": "2025-08-01T11:30:00Z",
      "updatedAt": null,
      "isEdited": false,
      "upvotes": 4,
      "downvotes": 0,
      "score": 4,
      "userVotes": {
        "1": "upvote",
        "2": "upvote",
        "4": "upvote",
        "5": "upvote"
      },
      "views": 6,
      "viewedBy": [
        "1",
        "2",
        "4",
        "5",
        "RcrQyKMJoMePqbkVTS8JF9l11Jg2"
      ],
      "answers": [
        {
          "id": "12",
          "content": "For responsive MUI components, make sure to use:\n\n- Breakpoint utilities in sx props\n- Grid system with proper spacing\n- Typography variants that scale\n- useMediaQuery hook for conditional rendering\n\nThe theme breakpoints in our current setup should handle most cases, but you might need custom breakpoints for the flashcard interface.",
          "authorId": "4",
          "authorName": "pctra266",
          "createdAt": "2025-08-01T15:15:00Z",
          "updatedAt": null,
          "isEdited": false,
          "isAccepted": false,
          "upvotes": 3,
          "downvotes": 0,
          "score": 3,
          "userVotes": {
            "1": "upvote",
            "2": "upvote",
            "14": "upvote"
          },
          "comments": [
            {
              "id": "c6",
              "content": "Should we also consider implementing a mobile-first approach for new components?",
              "authorId": "RcrQyKMJoMePqbkVTS8JF9l11Jg2",
              "authorName": "Trà Phạm",
              "createdAt": "2025-08-01T16:00:00Z",
              "updatedAt": null,
              "isEdited": false,
              "upvotes": 1,
              "downvotes": 0,
              "score": 1,
              "userVotes": {
                "4": "upvote"
              }
            }
          ]
        }
      ],
      "hasAcceptedAnswer": false
    }
  ],
  "siteStats": [
    {
      "id": "1",
      "date": "2025-07-08",
      "visits": 25,
      "flashcardsStudied": 46
    },
    {
      "id": "8dc9",
      "date": "2025-07-08",
      "visits": 1,
      "flashcardsStudied": 8
    },
    {
      "id": "ad2c",
      "date": "2025-08-08",
      "visits": 7,
      "flashcardsStudied": 2
    },
    {
      "id": "fcce",
      "date": "2025-08-09",
      "visits": 2,
      "flashcardsStudied": 0
    },
    {
      "id": "495e",
      "date": "2025-08-10",
      "visits": 7,
      "flashcardsStudied": 1
    },
    {
      "id": "b800",
      "date": "2025-08-11",
      "visits": 1,
      "flashcardsStudied": 3
    },
    {
      "id": "c568",
      "date": "2025-08-12",
      "visits": 8,
      "flashcardsStudied": 1
    },
    {
      "id": "e270",
      "date": "2025-08-13",
      "visits": 7,
      "flashcardsStudied": 4
    }
  ]
}